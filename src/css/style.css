/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}h1{font-size:2em;margin:.67em 0}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}:root{font-size:16px;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}body,html{-webkit-box-sizing:border-box;box-sizing:border-box;min-width:320px;max-width:100%;margin:0;padding:0;line-height:1.2;background-color:#f4f4f4}*,:after,:before{-webkit-box-sizing:inherit;box-sizing:inherit;overflow-wrap:break-word;word-wrap:break-word;word-break:break-word;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto}audio,img,video{max-width:100%;height:auto}button,input,label,select{font:inherit;cursor:pointer}textarea{font:inherit}button{margin:0;padding:0;border:none;color:inherit;background-color:transparent}img:not([alt]),img[alt=""]{outline:2px solid red}input:focus::-webkit-input-placeholder,textarea:focus::-webkit-input-placeholder{color:transparent}input:focus:-ms-input-placeholder,textarea:focus:-ms-input-placeholder{color:transparent}input:focus::-ms-input-placeholder,textarea:focus::-ms-input-placeholder{color:transparent}input:focus::placeholder,textarea:focus::placeholder{color:transparent}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;margin:0}.visually-hidden:not(:focus):not(:active){position:absolute!important;clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(100%);clip-path:inset(100%);height:1px!important;width:1px!important;padding:0!important;margin:-1px!important;border:0!important;white-space:nowrap!important;overflow:hidden!important;white-space:nowrap}.clearfix:after{visibility:hidden;content:"";display:table;height:0;clear:both;font-size:0;zoom:1}ol,ul{padding:0;margin:1.25rem 0}h1{margin:2.25rem 0;font-size:2.25rem}h1,h2{line-height:1.166}h2{margin:1.5rem 0;font-size:1.5rem}h3{margin:1.125rem 0;font-size:1.125rem;line-height:1.111}.container{width:360px;padding:0 20px;margin:auto}.header__email-link{display:block;margin:0 0 16px;font-size:14px;font-weight:400;text-align:center;text-decoration:none;color:#999898;outline:none}.header__email-link:focus,.header__email-link:hover{color:#090909}.header__logo{display:block;width:146px;padding:20px 0;margin:auto;font-size:0}.header__nav{margin-bottom:16px}.header__container:after{content:"";display:block;width:100%;height:1px;background-color:silver}.main-nav__list{padding:0;margin:0;list-style:none}.main-nav__item{text-align:center}.main-nav__item a{display:block;padding:8px 0;font-size:16px;font-weight:600;color:#fe9b00;text-transform:uppercase;text-decoration:none;outline:none}.main-nav__item a:focus,.main-nav__item a:hover{color:#090909;text-decoration:underline}.main-nav__item--active a{color:#090909}@media only screen and (min-width:576px){.container{width:536px}.header__container{position:relative}.header__logo{margin-left:0;width:118px}.header__email-link{position:absolute;top:20px;right:20px}.main-nav__item{float:left;width:80px}.main-nav__item a{font-size:12px}}@media only screen and (min-width:768px){.container{width:728px}.header__nav{float:right;margin:0;height:140px;width:502px}.header__logo{float:left;width:184px}.header__container:after{clear:both;font-size:0;zoom:1}.main-nav__item,.main-nav__list{height:100%}.main-nav__item{width:82px}.main-nav__item:before,.main-nav__item a{display:inline-block;vertical-align:middle}.main-nav__item:before{content:"";height:100%}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
